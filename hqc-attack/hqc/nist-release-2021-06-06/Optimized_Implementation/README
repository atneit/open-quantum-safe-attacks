

-------------------------------------------------
HQC: a Public-Key Encryption schemes
-------------------------------------------------


1. SUBMISSION OVERVIEW
----------------------

In order to fully understand this submission, one should note that HQC and HQC is
public-key encryption schemes submitted as a KEM for which NIST "standard
conversion techniques" should be applied (see NIST FAQ#13). In addition, the
aforementioned KEMs is obtained by applying a conversion technique to a PKE. In
order to avoid any confusion, we may refer to:

- HQC_PKE IND-CPA: HQC PKE IND-CPA scheme due to [1] and [6].
- HQC_KEM IND-CCA2: HQC KEM IND-CCA2 scheme obtained by applying the
  transformation from [2] to the HQC PKE IND-CPA scheme. It is the
  implementation provided.
- HQC_PKE IND-CCA2: HQC PKE IND-CCA2 scheme obtained by applying NIST "standard
  conversion techniques" to the HQC KEM IND-CCA2 scheme. It is the scheme
  submitted.

Six parameters sets denoted respectively HQC-128, HQC-192, and HQC-256 are provided as explained in the supporting documentation. Each parameter set folder is organized as follows:

- bin/: Files generated during compilation
- doc/: Technical documentation of the scheme
- lib/: Third party libraries used
- src/: Source code of the scheme
- doxygen.conf: Documentation configuration file
- Makefile: Makefile


2. INSTALLATION INSTRUCTIONS
----------------------------

2.1 Requirements

The following softwares and libraries are required: make and gcc. The target machine must support AVX2 instructions.

2.2 Compilation Step

Let X denotes -128, -192 or -256
differents ways:
- Execute make hqcX to compile a working example of the scheme. Run bin/hqcX to
  execute all the steps of the scheme and display theirs respective
  performances.
- Execute make hqcX-kat to compile the NIST KAT generator. Run bin/hqcX-kat to generate KAT files.
- Execute make hqcX-verbose to compile a working example of the scheme in
  verbose mode. Run bin/hqcX-verbose to generate intermediate values.

2.3 Compilation Step - HQC

During compilation, the following files are created inside the bin/build folder:
- fips202.o: Hash function SHA3
- shake_ds.o: Functions to perform domain separation based on SHAKE256
- shake_prng.o: Functions to generate random values based on SHAKE256
- parsing.o: Functions to parse public key, secret key and ciphertext of the
- gf2x.o: AVX2 implementation of function that multiply polynomials.
- vector.o: Functions to manipulate vectors.
- reed_solomon.o: Functions to encode and decode messages using Reed-Solomon codes (either in normal mode or verbose mode).
- reed_muller.o: Functions to encode and decode messages using Reed-Muller codes (decoding uses AVX2 instructions).
- fft.o: Functions for the additive Fast Fourier Transform.
- gf.o: Functions for Galois field manipulation.
- code.o: Functions to encode and decode messages using concatenated codes (either
  in normal mode or verbose mode).
- hqc.o: The HQC PKE IND-CPA scheme (either in normal mode or verbose mode).
- kem.o: The HQC KEM IND-CCA2 scheme (either in normal mode or verbose mode).

3. DOCUMENTATION
----------------

3.1 Requirements

The following softwares are required: doxygen and bibtex.

3.2 Generation Step

- Run doxygen doxygen.conf to generate the code documentation
- Browse doc/html/index.html to read the documentation


4. ADDITIONAL INFORMATION
-------------------------

4.1 Implementation overview - HQC

The HQC_KEM IND-CCA2 scheme is defined in the api.h and parameters.h files and implemented in kem.c. The latter is based on the HQC_PKE IND-CPA scheme that is defined in hqc.h and implemented in hqc.c. The HQC_PKE IND-CPA scheme uses Concatenated codes (see code.h and code.c) which is the combination of Reed-Solomon codes (see reed_solomon.h and reed_solomon.c) and Reed-Muller codes [5] (see reed_muller.h and reed_muller.c). Roots computation for Reed-Solomon codes is done by additive Fast Fourier Transform [3] [4] (see fft.h and fft.c). The decoding of Reed-Muller codes is written using AVX2 instructions. Files gf.h and gf.c provide the implementation of the underlying Galois field. The files gf2x.c and gf2x.h provide the function performing the multiplication of two polynomials (uses AVX2 instructions). As public key, secret key and ciphertext can be manipulated either with their mathematical representations or as bit strings, the files parsing.h and parsing.c provide functions to switch between these two representations. The files shake_ds.h and shake_ds.c provide functions to perfom domain separation based on SHAKE256. The file domains.h contains SHAKE-256 domains separation. Random values needed for the scheme are provided by functions in files shake_prng.c and shake_prng.h. Finally, the files fips202.h and fips202.c (inside the lib/fips202 folder) contain an implementation of SHA3.

4.2 Public key, secret key, ciphertext and shared secret

The public key, secret key and ciphertext are respectively composed of the
vectors (h, s), (x, y) and (u, v, d). The shared secret is the output of the
hash of m using SHAKE256. In order to shorten the keys, the public key is stored
as (seed1, s) and the secret key is stored as (seed2). To this end, the seed
expander provided by the NIST was used along with 40 bytes long seeds.


5. REFERENCES
-------------

[1] Carlos Aguilar, Olivier Blazy, Jean-Christophe Deneuville, Philippe
Gaborit, and Gilles Zémor. Efficient encryption from random quasi-cyclic codes.
Cryptology ePrint Archive, Report 2016/1194, 2016.

[2] Dennis Hofheinz, Kathrin Hövelmanns, and Eike Kiltz. A modular analysis of
the fujisaki-okamoto transformation. Cryptology ePrint Archive, Report
2017/604, 2017.

[3] Gao, Shuhong, and Todd Mateer. "Additive fast Fourier transforms over finite fields."
IEEE Transactions on Information Theory 56.12 (2010): 6265-6272.

[4] Bernstein, Daniel J., Tung Chou, and Peter Schwabe.
"McBits: fast constant-time code-based cryptography."
International Workshop on Cryptographic Hardware and Embedded Systems.
Springer, Berlin, Heidelberg, 2013.

[5] MacWilliams, Florence Jessie and Sloane, Neil James Alexander
  The theory of error-correcting codes. Elsevier, 1977.

[6] Nicolas Aragon, Philippe Gaborit and Gilles Zémor. HQC-RMRS, an instantiation of the HQC encryption framework with a more efficient auxiliary error-correcting code.
https://arxiv.org/abs/2005.10741.
